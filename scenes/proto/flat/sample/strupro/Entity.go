// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package strupro

import (
	flatbuffers "mxs/scenes/proto/flat/flatbuffers"
)

type Entity struct {
	_tab flatbuffers.Table
}

func GetRootAsEntity(buf []byte, offset flatbuffers.UOffsetT) *Entity {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Entity{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsEntity(buf []byte, offset flatbuffers.UOffsetT) *Entity {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Entity{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Entity) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Entity) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Entity) Eid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Entity) MutateEid(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *Entity) Pos(obj *Position) *Position {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Position)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Entity) Weight() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Entity) MutateWeight(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *Entity) Angle() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Entity) MutateAngle(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *Entity) Temperature() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Entity) MutateTemperature(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *Entity) Bubble() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func EntityStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func EntityAddEid(builder *flatbuffers.Builder, eid int32) {
	builder.PrependInt32Slot(0, eid, 0)
}
func EntityAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(pos), 0)
}
func EntityAddWeight(builder *flatbuffers.Builder, weight uint32) {
	builder.PrependUint32Slot(2, weight, 0)
}
func EntityAddAngle(builder *flatbuffers.Builder, angle float32) {
	builder.PrependFloat32Slot(3, angle, 0.0)
}
func EntityAddTemperature(builder *flatbuffers.Builder, temperature float32) {
	builder.PrependFloat32Slot(4, temperature, 0.0)
}
func EntityAddBubble(builder *flatbuffers.Builder, bubble flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(bubble), 0)
}
func EntityEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
