// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package strupro

import (
	flatbuffers "mxs/proto/flat/flatbuffers"
)

/// PosMessage 位置信息
type PosMessage struct {
	_tab flatbuffers.Table
}

func GetRootAsPosMessage(buf []byte, offset flatbuffers.UOffsetT) *PosMessage {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PosMessage{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPosMessage(buf []byte, offset flatbuffers.UOffsetT) *PosMessage {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PosMessage{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PosMessage) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PosMessage) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PosMessage) Pos(obj *Position) *Position {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Position)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PosMessage) Eid() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PosMessage) MutateEid(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *PosMessage) S() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PosMessageStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PosMessageAddPos(builder *flatbuffers.Builder, pos flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(pos), 0)
}
func PosMessageAddEid(builder *flatbuffers.Builder, eid int32) {
	builder.PrependInt32Slot(1, eid, 0)
}
func PosMessageAddS(builder *flatbuffers.Builder, s flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(s), 0)
}
func PosMessageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
